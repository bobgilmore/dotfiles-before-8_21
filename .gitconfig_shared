# Shared git configuration settings, from https://github.com/bobgilmore/dotfiles
[core]
	excludesfile = ~/.gitignore
[color]
  ui = true
[push]
#  default = simple
[alias]
  # http://robots.thoughtbot.com/post/4747482956/streamline-your-git-workflow-with-aliases
  c = commit -m
  a = add
  aa= !git add -u && git add . && git status
  co = checkout
  cob = checkout -b
  gwc = whatchanged -p --abbrev-commit --pretty=medium

  gg = log --oneline --graph --decorate

  up  = !git fetch origin && git rebase origin/master && git submodule update
  upb = !sh -c 'git fetch origin && git rebase origin/$1' -
  ir  = !git rebase -i origin/master
  irb = !sh -c 'git rebase -i origin/$1' -
  done  = !git fetch && git rebase origin/master && git checkout master && git merge @{-1} && git push
  doneb = !sh -c 'git fetch origin && git rebase origin/$1 && git push' -

  # From http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/
  # List commits in short form, with colors and branch/tag annotations.
  ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
  # List commits showing changed files
  ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
  # List with no colors if you need to chain the out put with Unix pipes
  lnc = log --pretty=format:"%h\\ %s\\ [%cn]"
  # List oneline commits showing dates
  lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
  # List oneline commits showing relative dates
  ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
  # default look for short git log
  le = log --oneline --decorate
  # See commits related to a file
  filelog = log -u
  fl = log -u
  # Show modified files in last commit
  dl = "!git ll -1"
  # Show diff last commit
  dlc = diff --cached HEAD^
  # Above, but for a given commit hash
  dr  = "!f() { git diff "$1"^.."$1"; }; f"
  lc  = "!f() { git ll "$1"^.."$1"; }; f"
  diffr  = "!f() { git diff "$1"^.."$1"; }; f"
  # Meta; see all get aliases:
  la = "!git config -l | grep alias | cut -c 7-"
  # Show tree
  logtree = "log --graph --oneline --decorate --all"
  # Generate patch file
  genpatchb = !sh -c 'git diff $1 --no-prefix --full-index' -

  # Alternate profiles
  # The example below shows how to configure a particular project with different
  # git user information
  #osprofile = config user.email \"bobg@ourstage.com\"

  # Adapted from http://brettterpstra.com/2014/08/04/shell-tricks-one-git-alias-to-rule-them-all/
  finda = "!grepalias() { git config --get-regexp alias | grep -i \"$1\" | awk -v nr=2 '{sub(/^alias\\./,\"\")};{printf \"\\033[31m%_10s\\033[1;34m\", $1};{sep=FS};{for (x=nr; x<=NF; x++) {printf \"%s%s\", sep, $x; }; print \"\\033[0;39m\"}'; }; grepalias"

  # Other
  ss = status
  dd = difftool

  hash = "!git log -n 1 --oneline"

  # From https://docs.gitlab.com/ee/user/project/push_options.html
  mwps = push -o merge_request.create -o merge_request.target=develop -o merge_request.merge_when_pipeline_succeeds -o merge_request.remove_source_branch 
